#
#  Author: Hari Sekhon
#  Date: 2019-11-25 13:47:16 +0000 (Mon, 25 Nov 2019)
#
#  vim:ts=2:sts=2:sw=2:et
#
#  https://github.com/harisekhon/kubernetes-templates
#
#  License: see accompanying Hari Sekhon LICENSE file
#
#  If you're using my code you're welcome to connect with me on LinkedIn
#  and optionally send me feedback to help improve or steer this or other code I publish
#
#  https://www.linkedin.com/in/HariSekhon
#

# ============================================================================ #
#                              D e p l o y m e n t
# ============================================================================ #

# https://kubernetes.io/docs/concepts/workloads/controllers/deployment

# This is your main point of deploying apps, and has lots of tricks and best practices baked in
#
# Edit / Delete as necessary for your deployment (it's easier than remembering / finding / adding all this stuff)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: NAME
  namespace: NAMESPACE
  labels:
    app: APP
  annotations:
    # see also k8s_pod_disruption_budget.yaml
    cluster-autoscaler.kubernetes.io/safe-to-evict: True  # set to False for apps that don't like disruption
spec:
  paused: False
  revisionHistoryLimit: 10  # how many ReplicaSets specs to retain for rollbacks
  strategy:
    type: RollingUpdate
    rollingUpdate:
      #maxUnavailable: 25%
      maxUnavailable: 1
      #maxSurge: 25%
      maxSurge: 1
  nodeSelector:
    disktype: ssd
    kubernetes.io/arch: amd64
    kubernetes.io/os: linux
    node.kubernetes.io/instance-type: m3.medium    # 1.17+
    topology.kubernetes.io/zone: eueurope-west2-a  # 1.17+
    topology.kubernetes.io/region: europe-west2    # 1.17+
  # for persistent disks limited to 2 zones combined with GKE regional clusters
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity:
    nodeAffinity:
    #nodeAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1  # 1 to 100, higher is stronger
          preference:
            - matchExpressions:
              - key: accelerator-type
                operator: In
                values:
                  - gpu
                  - tpu
          # XXX: prefer non-preemptible VMs unless unavailable
        - weight: 100
          preference:
            - matchExpressions:
              - key: cloud.google.com/gke-preemptible
                operator: DoesNotExist
      requiredDuringSchedulingIgnoredDuringExecution:
        - nodeSelectorTerms:
          - matchExpressions:
            # AND
            - key: kubernetes.io/e2e-az-name
              operator: In # NotIn, Exists, DoesNotExist
              # OR
              values:
              - europe-west-1b
              - europe-west-1c
            # XXX: remove this if the pod is safe to preempt
            #
            # Node preemption:
            # - shuts down pods ungracefully
            # - ignores PodDisruptionBudget
            # - invalidate Stateful guarantees and can lead to data loss !!
            # https://cloud.google.com/kubernetes-engine/docs/how-to/preemptible-vms#kubernetes_constraint_violations
            # https://cloud.google.com/kubernetes-engine/docs/how-to/preemptible-vms#best_practices
            - key: cloud.google.com/gke-preemptible
              operator: DoesNotExist
    #podAffinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              - matchExpressions:
                - key: app
                  operator: In
                  values:
                    APP
          topologyKey: topology.kubernetes.io/zone
  selector:
    matchLabels:
      app: APP
      role: master
      tier: backend
  replicas: 3
  template:
    metadata:
      labels:
        app: APP
        role: master
        tier: backend
    spec:
      minReadySeconds: 0  # secs healthy before serving
      progressDeadlineSeconds: 120
      terminationGracePeriodSeconds: 120  # how long between SIGTERM and SIGKILL (kill -9) - may want to set higher than default 30 secs eg. 1800 for Cassandra
      dnsPolicy: ClusterFirst # use coredns, Default uses node's dns resolution
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File  # FallbackToLogsOnError to use container logs if message file is empty upon container error
      nodeSelector:
        myLabel: myFastNodes
      securityContext:
        # see pod-security-policy.yaml for wider enforcement
        runAsNonRoot: true
        #runAsUser: 0   # not recommended
        fsGroup: 1000   # group to own volumeMounts so they can be written to by the user-level process
      containers:
      - name: master
        image: k8s.gcr.io/APP:latest
        imagePullPolicy: IfNotPresent  # set to Always if replacing a docker_image:tag or using :latest in development
        ports:
          - containerPort: 8080
        env:
          - name: HEAP_SIZE
            value: 1G
          - name: CASSANDRA_SEEDS
            value: cassandra-0.cassandra.default.svc.cluster.local
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP  # K8S API path
        readinessProbe:
          # http, tcp or exec
          httpGet:
            path: /healthz
            port: 8080
          # only uncomment if you can't use http check, must delete http check otherwise will get this error:
          # invalid: spec.containers[0].livenessProbe.tcpSocket: Forbidden: may not specify more than 1 handler type
          #tcpSocket:
          #  port: 8080
          initialDelaySeconds: 0 # default
          successThreshold: 1    # default
          failureThreshold: 3    # default
          periodSeconds: 10      # default (interval)
          timeoutSeconds: 1      # default
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          #tcpSocket:
          #  port: 8080
          initialDelaySeconds: 0 # default
          successThreshold: 1    # default
          failureThreshold: 3    # default
          periodSeconds: 10      # default (interval)
          timeoutSeconds: 1      # default
        resources:
          limits:
            cpu: 1
            memory: 4Gi  # GiB
          requests:
            # millicores - 1/1000 of a CPU / vCPU
            # 100m = 1/10th of CPU core
            cpu: 100m
            memory: 100Mi # MiB
        volumes:
          - name: APP-vol
            # GKE will automatically create the underlying disk for us using default storage provider's dynamic provisioner
            claimName: APP-dynamic-pvc
            readOnly: true
        volumeMounts:
          - name: APP-vol
            mountPath: /mnt/APP-vol
        securityContext:
          capabilities:
            add: ["IPC_LOCK"]  # allow mlock to avoid paging ram to disk, for security or performance eg. NoSQL low latency datastores
        lifecycle:
          # execute this when sending TERM to container
          preStop:
            # http call or exec
            exec:
              command:
                - /bin/sh
                - -c
                - nodetool drain
        # ignore taints
        #tolerations:
        #  - key: "myKey"
        #    operator: "Exists"  # if myKey exists ignore NoSchedule
        #    operator: "Equal"   # if myKey's value = "value" ignore NoSchedule
        #      value: "value"
        #    effect: "NoSchedule"
      initContainers:
        - name: init-files
          image: alpine/git
          command: ['git', 'clone', 'https://github.com/harisekhon/devops-python-tools /data']
          volumeMounts:
            - name: app-vol
              mountPath: /data
        - name: init-mysql-service
          image: busybox
          command: ['sh', '-c', 'until nslookup mysql; do echo waiting for mysql service DNS to come up; sleep 1; done']
        - name: init-mysql-endpoint
          image: busybox
          command: ['sh', '-c', 'until nc -z mysql 3306; do echo waiting for mysql endpoint port to come up; sleep 1; done']
      VolumeClaimTemplates:
        - metadata:
            name: APP-data
          spec:
            # optional: requires storageclass-*.yaml
            #storageClassName: ssd
            #storageClassName: ssd-resizeable
            #storageClassName: standard-resizeable
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                # resize here doesn't affect the PVC, must edit the PVC directly to trigger the provider resize, didn't even need a pod cycle in GCP testing
                storage: 1Gi
